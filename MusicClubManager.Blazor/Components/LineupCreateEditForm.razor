@attribute [Authorize(Policy = "ValidTokenOnly")]

@inject ILineupService LineupApiService

@* <h2>@(Model.Name != null ? $"Edit lineup {Model.Name}" : "Create lineup")</h2>
 *@
<EditForm Model="Model" OnValidSubmit="Post">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div>
        <label for="Name">Name</label>

        <InputText @bind-Value="Model.Name" id="Name" />
    </div>

    <div>
        <label for="Doors">Doors</label>

        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="Model.Doors" id="Doors" />
    </div>


    <div>
        <button type="submit">Save</button>
    </div>

    @*         <div>
    @if (_hasDeleteRequest)
    {
    <p>Are you sure you want to delete @Model.Name (id: @Id)?</p>

    <button type="button" @onclick="() => _hasDeleteRequest = false">No</button>

    <button type="button" @onclick="Delete">Yes</button>
    }
    else
    {
    <button type="submit">Save</button>

    <button type="button">Undo changes</button>

    <button type="button" @onclick="() => _hasDeleteRequest = true">Delete</button>
    }
    </div> *@
</EditForm>

@code {
    [Parameter, EditorRequired]
    public required LineupCreateEditFormModel Model { get; set; }


    private bool _hasDeleteRequest;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventCallback<LineupResult> OnPosted { get; set; }

    // [Parameter]
    // public EventCallback OnDeleted { get; set; }

    private async Task Post()
    {
        if (Model is null)
        {
            return;
        }

        if (Model.Doors is null)
        {
            return;
        }

        var serviceResult = await LineupApiService.Create(new LineupRequest { Doors = Model.Doors.Value, EventId = Model.EventId, IsSoldOut = Model.IsSoldOut, Name = Model.Name });
        if (serviceResult.Messages is null)
        {
            await OnPosted.InvokeAsync(serviceResult.Data);
        }
    }

    // private async Task Delete()
    // {
    //     var serviceResult = await LineupApiService.Delete(Id);
    //     if (serviceResult.Messages is null)
    //     {
    //         await OnDeleted.InvokeAsync();
    //     }
    // }
}