@page "/artists"

@attribute [Authorize(Policy = "ValidTokenOnly")]

@inject IArtistService ArtistApiService
@inject ArtistFilterStore ArtistFilterStore

<section>
    <h2>Artists</h2>

    <NavLink href="/artists/create">Create</NavLink>

    <EditForm Model="_artistFilter" OnValidSubmit="() => FetchArtists(_paginationContext)">
        <div>
            <label for="Name">Name</label>

            <InputText @bind-Value="_artistFilter.Name" type="text" id="Name" />
        </div>

        <div>
            <label for="SortProperty">Sort property</label>

            <InputSelect @bind-Value="_artistFilter.SortProperty" id="SortProperty">
                <option value="@nameof(ArtistResult.Id)">@nameof(ArtistResult.Id)</option>
                <option value="@nameof(ArtistResult.Name)">@nameof(ArtistResult.Name)</option>
            </InputSelect>
        </div>

        <div>
            <label>Sort direction</label>

            <div>
                <InputRadioGroup Name="SortDirection" @bind-Value="_artistFilter.SortDirection">
                    <label>
                        <InputRadio Name="SortDirection" Value="SortDirection.Ascending" />
                        @SortDirection.Ascending.ToString()
                    </label>

                    <label>
                        <InputRadio Name="SortDirection" Value="SortDirection.Descending" />
                        @SortDirection.Descending.ToString()
                    </label>
                </InputRadioGroup>
            </div>
        </div>

        <div>
            <button type="submit">Filter</button>

            <button type="button" @onclick="ClearArtistFilter">Clear</button>
        </div>
    </EditForm>

    @if (_artistsResults is not null && _artistsResults.Count > 0)
    {
        <ul>
            @foreach (var artistResult in _artistsResults)
            {
                var href = $"/artists/{artistResult.Id}/properties";

                <li>
                    <NavLink href="@href">
                        <span>@artistResult.Id</span>
                        <span><b>@artistResult.Name</b></span>
                    </NavLink>
                </li>
            }
        </ul>
    }
    else
    {
        if (_artistsResults is null)
        {
            <p>Loading... </p>
        }
        else
        {
            <p>There are no artists</p>
        }
    }

    <Pagination Context="_paginationContext" OnPageChanged="FetchArtists" />
</section>


@code {
    private ArtistFilter _artistFilter = new ArtistFilter { };

    private PaginationContext _paginationContext = new() { Page = 1, PageSize = 24, TotalCount = 0 };

    private IList<ArtistResult>? _artistsResults;

    protected override async Task OnInitializedAsync()
    {
        if (await ArtistFilterStore.Get() is { } artistFilter)
        {
            _artistFilter = artistFilter;
        }

        await FetchArtists(_paginationContext);

        await base.OnInitializedAsync();
    }

    private async Task FetchArtists(PaginationContext paginationContext)
    {
        var serviceResult = await ArtistApiService.GetAll(new PaginationRequest { Page = (uint)paginationContext.Page, PageSize = (uint)paginationContext.PageSize }, _artistFilter);

        _paginationContext = new PaginationContext { Page = (int)serviceResult.Page, PageSize = (int)serviceResult.PageSize, TotalCount = (int)serviceResult.TotalCount };

        _artistsResults = serviceResult.Data;

        await ArtistFilterStore.Set(_artistFilter);
    }

    private async Task ClearArtistFilter()
    {
        _artistFilter = new ArtistFilter { };

        await ArtistFilterStore.Remove();

        await FetchArtists(_paginationContext);
    }
}
