@page "/performances/create/lineup/select"

@layout PerformanceLayout

@inject ILineupService LineupApiService

<section>
    @if (_serviceResult?.Data is { } lineupResults)
    {
        @if (_areFiltersOpen)
        {
            <ul>
                <li>
                    <h4>Filters</h4>
                </li>

                <li>
                    <button @onclick="() => _areFiltersOpen = false">Results (@_serviceResult?.TotalCount found)</button>
                </li>
            </ul>

            <LineupFilterForm Model="Context.LineupFilter" OnFilter="(lineupFilter) => FetchLineups(Context.LineupPaginationContext, lineupFilter)" />
        }
        else
        {
            <ul>
                <li>
                    <button @onclick="() => _areFiltersOpen = true">Filters </button>
                </li>

                <li>
                    <h4>Results (@_serviceResult?.TotalCount found)</h4>
                </li>
            </ul>

            @if (lineupResults.Count > 0)
            {
                <div>
                    <ul>
                        <InputRadioGroup Name="@nameof(PerformanceContext.LineupId)" @bind-Value:get="Context.LineupId" @bind-Value:set="SetLineupResult">
                            @foreach (var lineupResult in lineupResults)
                            {
                                <li class="@(Context.LineupId == lineupResult.Id ? "selected" : "")">

                                    <div>
                                        <label class="radio-button-container">
                                            <InputRadio Name="@nameof(PerformanceContext.LineupId)" Value="lineupResult.Id" />

                                            <span class="radio-button-checkmark">
                                                <span></span>
                                            </span>

                                            <h5>
                                                @lineupResult.Doors.ToLongDateString(), at @lineupResult.Doors.ToShortTimeString()
                                            </h5>
                                        </label>

                                        <NavLink class="button">Edit</NavLink>
                                    </div>

                                    <ul>
                                        <li>Doors: @lineupResult.Doors.ToShortTimeString()</li>
                                        <li>Name: @(lineupResult.Name ?? "/")</li>
                                        <li>Sold out: @lineupResult.IsSoldOut</li>
                                    </ul>

                                    <div>
                                        <ul>
                                            @foreach (var performance in lineupResult.PagedLineupPerformanceResult.Data)
                                            {
                                                <li>
                                                    <span>@(performance.Start?.ToShortTimeString() ?? "--:--")</span>
                                                    <span> @performance.ArtistResult?.Name</span>
                                                </li>
                                            }
                                        </ul>

                                        <PaginationSlim Context="new PaginationContext { Page = (int)lineupResult.PagedLineupPerformanceResult.Page, PageSize = (int)lineupResult.PagedLineupPerformanceResult.PageSize, TotalCount = (int)lineupResult.PagedLineupPerformanceResult.TotalCount}"
                                                        OnPageChanged="(context) => FetchLineup(lineupResult.Id, context)" />
                                    </div>


                                </li>
                            }
                        </InputRadioGroup>
                    </ul>

                    <Pagination Context="Context.LineupPaginationContext" OnPageChanged="(paginationContext) => FetchLineups(paginationContext, Context.LineupFilter)" />
                </div>
            }
            else
            {
                <p>No results found</p>
            }
        }

    }
</section>

@code {
    [CascadingParameter]
    public required PerformanceContext Context { get; set; }

    [CascadingParameter]
    public bool IsValid { get; set; }

    private PagedServiceResult<IList<LineupResult>>? _serviceResult;

    private bool _areFiltersOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchLineups(Context.LineupPaginationContext, Context.LineupFilter);

        if (Context.LineupId is not null || Context.LineupId > 0)
        {
            _lineupResult = _serviceResult?.Data?.FirstOrDefault(a => a.Id == Context.LineupId);
            if (_lineupResult is null)
            {
                await FetchLineup((int)Context.LineupId);
            }
        }

        await base.OnInitializedAsync();
    }

    private LineupResult? _lineupResult;
    private void SetLineupResult(int? value)
    {
        Context.LineupId = value;

        _lineupResult = _serviceResult?.Data?.FirstOrDefault(a => a.Id == value);

        if (Context.LineupId is not null && Context.ArtistId is not null)
        {
            Context.IsValid = true;
        }
    }

    private async Task FetchLineup(int id)
    {
        var serviceResult = await LineupApiService.Get(id);

        _lineupResult = serviceResult.Data;
    }

    private async Task FetchLineups(PaginationContext paginationContext, LineupFilter lineupFilter)
    {
        var serviceResult = await LineupApiService.GetAll(new PaginationRequest { Page = (uint)paginationContext.Page, PageSize = (uint)paginationContext.PageSize }, lineupFilter);

        Context.LineupPaginationContext = new PaginationContext { Page = (int)serviceResult.Page, PageSize = (int)serviceResult.PageSize, TotalCount = (int)serviceResult.TotalCount };

        _serviceResult = serviceResult;
    }

    private async Task FetchLineup(int id, PaginationContext paginationContext)
    {
        if (_serviceResult?.Data is not { } lineupResults)
        {
            return;
        }

        var serviceResult = await LineupApiService.Get(id, new PaginationRequest { Page = (uint)paginationContext.Page, PageSize = (uint)paginationContext.PageSize });

        if (serviceResult.Data is not { } lineupResult)
        {
            return;
        }

        lineupResults[lineupResults.ToList().FindIndex(l => l.Id == serviceResult.Data?.Id)] = lineupResult;
    }
}