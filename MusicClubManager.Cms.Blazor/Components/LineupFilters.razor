<Form TModel="LineupFilter" Model="Model" OnValidSubmit="(args) => OnFilter.InvokeAsync(args)" Context="model">
    <Template>
        <div>
            <div>
                <label for="Name">Name</label>

                <InputText @bind-Value="model.Name" type="text" id="Name" />
            </div>

            <div>
                <label for="SortProperty">Sort property</label>

                <InputSelect @bind-Value="model.SortProperty" id="SortProperty">
                    <option value="@nameof(ArtistResult.Id)">@nameof(ArtistResult.Id)</option>
                    <option value="@nameof(ArtistResult.Name)">@nameof(ArtistResult.Name)</option>
                </InputSelect>
            </div>

            <div>
                <label>Sort direction</label>

                <div>
                    <InputRadioGroup Name="SortDirection" @bind-Value="model.SortDirection">
                        <label>
                            <InputRadio Name="SortDirection" Value="SortDirection.Ascending" />
                            @SortDirection.Ascending.ToString()
                        </label>

                        <label>
                            <InputRadio Name="SortDirection" Value="SortDirection.Descending" />
                            @SortDirection.Descending.ToString()
                        </label>
                    </InputRadioGroup>
                </div>
            </div>
        </div>

        <Buttons>
            <li><button type="submit">Filter</button></li>

            <li><button type="button" @onclick="ClearLineupFilter">Clear</button></li>
        </Buttons>
    </Template>
</Form>

@code {
    [Parameter, EditorRequired]
    public required LineupFilter Model { get; set; }

    [Parameter]
    public EventCallback<LineupFilter> OnFilter { get; set; }

    private async Task ClearLineupFilter()
    {
        Model = new LineupFilter { };

        await OnFilter.InvokeAsync(Model);
    }
}