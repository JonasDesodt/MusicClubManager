<div>
    @if (Context.TotalCount > 1)
    {
        <ul class="left">
            @if (Context.Page > 1)
            {
                <li class="first">
                    <button @onclick="() => HandleOnClick(1)" type="button">
                        First
                    </button>
                </li>
                <li class="previous">
                    <button @onclick="() => HandleOnClick(--Context.Page)" type="button">
                        Previous
                    </button>
                </li>
            }
        </ul>
        <ul class="center">
            @for (var pge = StartPage; pge <= EndPage; pge++)
            {
                var currentPage = pge;

                <li>
                    <button @onclick="() => HandleOnClick(currentPage)" class="@(currentPage == Context.Page ? "active" : "")" type="button">
                        @currentPage
                    </button>
                </li>
            }

        </ul>
        <ul class="right">

            @if (Context.Page < TotalPages)
            {
                <li class="next">
                    <button @onclick="() => HandleOnClick(++Context.Page)" type="button">
                        Next
                    </button>
                </li>
                <li class="last">
                    <button @onclick="() => HandleOnClick(TotalPages)" type="button">
                        Last
                    </button>
                </li>
            }
        </ul>
    }
</div>





@code {
    [Parameter, EditorRequired]
    public required Pagination Context { get; set; }

    [Parameter]
    public EventCallback<Pagination> OnPageChanged { get; set; }

    private int TotalPages => (int)Math.Ceiling(Context.TotalCount / (decimal) Context.PageSize);

    private int StartPage => (Context.Page - 2) <= 0 ? 1 : Context.Page - 2;

    private int EndPage => StartPage + 3 > TotalPages ? TotalPages : StartPage + 3;

    private async Task HandleOnClick(int page)
    {
        Context.Page = page;

        await OnPageChanged.InvokeAsync(Context);
    }
}