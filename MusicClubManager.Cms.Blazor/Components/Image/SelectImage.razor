@inject ImageApiService ImageApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="@ReturnUrl" ReturnTitle="@ReturnTitle">
    @(!ReturnTitle.Equals("Home") ? ReturnTitle + ": select image" : "Index")
</SubTitle>

<Navigation>
    <li><NavLink href="@($"{NavigationManager.Uri}/filters")">Filters</NavLink></li>
</Navigation>

@if (pagedServiceResult is not null)
{
    <PagedList PagedServiceResult="pagedServiceResult" Context="imageResult" OnPageChanged="async (pagination) => pagedServiceResult = await ImageApiService.GetAll(pagination.ToPaginationRequest())">
        <ItemTemplate>
            <ImageItem Model="imageResult">
                <Buttons>
                    @Buttons(imageResult.Id)
                </Buttons>
            </ImageItem>
        </ItemTemplate>
    </PagedList>
}
else
{
    <Spinner />
}

@code {
    public PagedServiceResult<IList<ImageResult>>? pagedServiceResult { get; set; }

    [Parameter]
    public EventCallback<int> OnSelect { get; set; }

    [Parameter, EditorRequired]
    public required RenderFragment<int> Buttons { get; set; }

    private string[] Uri => NavigationManager.Uri.Split('/');

    private string ReturnUrl => Uri.Length >= 5 ? Uri[3] + '/' + Uri[4] : "/";

    private string ReturnTitle => (Uri.Length >= 5 ? Uri[4] : "Home");

    protected override async Task OnInitializedAsync()
    {
        pagedServiceResult = await ImageApiService.GetAll(new PaginationRequest { Page = 1, PageSize = 12 });

        await base.OnInitializedAsync();
    }
}
