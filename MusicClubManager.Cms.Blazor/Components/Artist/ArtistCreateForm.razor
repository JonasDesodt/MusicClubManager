@inject IArtistService ArtistApiService
@inject ImageApiService ImageApiService;

<EditForm Model="_model" OnValidSubmit="() => Submit(_model)">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <ValidationSummary></ValidationSummary>

    <ArtistInputs Model="_model"></ArtistInputs>

    <Buttons>
        <li><button type="submit">Create</button></li>

        <li><button type="reset" class="warning">Reset</button></li>
    </Buttons>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public EventCallback<int> OnSubmitted { get; set; }

    private CreateArtistFormModel _model = new();

    private async Task Submit(CreateArtistFormModel _model)
    {

        if (string.IsNullOrWhiteSpace(_model.Name))
        {
            return;
        }

        var request = new ArtistRequest
            {
                Name = _model.Name,
                Description = _model.Description,
                Image = _model.BrowserFile?.Name
            };

        if ((await ArtistApiService.Create(request)).Data is not { } artistResult)
        {
            return;
        }

        if(_model.BrowserFile is { Size: > 0}  file)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream());
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            await ImageApiService.Create(content);
        }


        await OnSubmitted.InvokeAsync(artistResult.Id);
    }
}
