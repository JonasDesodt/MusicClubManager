@using System.Text.Json
@using System.Text
@inject IArtistService ArtistApiService
@inject ImageApiService ImageApiService;

<Form TModel="CreateArtistFormModel" Model="_model" OnValidSubmit="() => Submit(_model)">
    <Template>
        <ArtistInputs Model="_model"></ArtistInputs>

        <Buttons>
            <li><button type="submit">Create</button></li>

            <li><button type="reset" class="warning">Reset</button></li>
        </Buttons>
    </Template>
</Form>

@code {
    [Parameter, EditorRequired]
    public EventCallback<int> OnSubmitted { get; set; }

    private CreateArtistFormModel _model = new();

    private async Task Submit(CreateArtistFormModel _model)
    {

        if (string.IsNullOrWhiteSpace(_model.Name))
        {
            return;
        }

        var request = new ArtistRequest
            {
                Name = _model.Name,
                Description = _model.Description
            }; //IMAGEID !!

        if ((await ArtistApiService.Create(request)).Data is not { } artistResult)
        {
            return;
        }

        int? imageId = null;

        if (_model.BrowserFile is { Size: > 0 } file)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream());
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            var now = DateTime.UtcNow;

            var imageRequest = new ImageRequest
            {
                Alt = file.Name,
                Created = now,
                Updated = now,
                ContentType = file.ContentType
            };
            var json = JsonSerializer.Serialize(imageRequest);
            content.Add(new StringContent(json, Encoding.UTF8, "application/json"), "request");

            await ImageApiService.Create(content);
        }


        await OnSubmitted.InvokeAsync(artistResult.Id);
    }
}
