@page "/lineups/{lineupId:int}/performances"

@layout LineupLayout

@inject ILineupService LineupApiService
@inject IPerformanceService PerformanceApiService

@{
    var returnUrl = $"lineups/{LineupId}";
}
<SubTitle ReturnUrl="@returnUrl" ReturnTitle="Edit lineup">
    Performances
</SubTitle>

<Navigation>
    <li>
        <NavLink href="@($"/lineups/{LineupId}/performances/select-artist")">Create</NavLink>
    </li>

    <li>
        <NavLink href="@($"/lineups/{LineupId}/performances/filters")">Filters</NavLink>
    </li>
</Navigation>

<PagedList PagedServiceResult="_pagedServiceResult" OnPageChanged="(context) => FetchPerformances(LineupId, new PaginationRequest { Page = (uint)context.Page, PageSize = (uint)context.PageSize })" Context="performanceResult">
    <ItemTemplate>
        <PerformanceItem Model="performanceResult">
            <Buttons>
                <li><NavLink href="@($"performances/{performanceResult.Id}")">Edit</NavLink></li>
            </Buttons>
        </PerformanceItem>
    </ItemTemplate>
</PagedList>



@code {
    [Parameter]
    public int LineupId { get; set; }

    private ServiceResult<LineupResult>? _lineupResult;

    private PagedServiceResult<IList<LineupPerformanceResult>>? _pagedServiceResult;

    protected override async Task OnParametersSetAsync()
    {
        _lineupResult = await LineupApiService.Get(LineupId, new PaginationRequest { Page = 1, PageSize = 5 });

        _pagedServiceResult = await FetchPerformances(LineupId, new PaginationRequest { Page = 1, PageSize = 24 });

        await base.OnParametersSetAsync();
    }

    private async Task<PagedServiceResult<IList<LineupPerformanceResult>>?> FetchPerformances(int id, PaginationRequest paginationRequest)
    {
        if (id > 0)
        {
            return _pagedServiceResult = await PerformanceApiService.GetAll(LineupId, paginationRequest, new PerformanceFilter { });
        }

        return null;
    }
}