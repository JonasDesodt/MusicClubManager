@page "/lineups/{lineupId:int}/{artistId:int}/add-performance"

@layout LineupLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService
@inject IPerformanceService PerformanceApiService

@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="@($"lineups/{LineupId}/performances/select-artist")" ReturnTitle="Select artist">
    Create performance: properties
</SubTitle>

@if (_lineupResult is { } lineupResult && _artistResult is { } artistResult)
{
    <Form TModel="CreateEditLineupPerformanceFormModel" Model="_model" OnValidSubmit="AddPerformance">
        <Template>
            <div>
                <CreateEditPerformance Model="_model"></CreateEditPerformance>

                <div>
                    <InputNumber @bind-Value="_model.LineupId" hidden />
                    <p>Lineup:</p>
                    <p>@(lineupResult.Name ?? lineupResult.Doors.ToLongDateString()) (id: @_model.ArtistId))</p>
                </div>

                <div>
                    <InputNumber @bind-Value="_model.ArtistId" hidden />
                    <p>Artist: </p>
                    <p>@artistResult.Name (id: @_model.ArtistId)</p>
                </div>
            </div>

            <Buttons>
                <li><button type="submit">Add</button></li>
            </Buttons>
        </Template>
    </Form>
}

@code {
    [Parameter]
    public int LineupId { get; set; }
    private LineupResult? _lineupResult;

    [Parameter]
    public int ArtistId { get; set; }
    private ArtistResult? _artistResult;

    private CreateEditLineupPerformanceFormModel _model = new();

    protected override async Task OnParametersSetAsync()
    {
        var artistServiceResult = await ArtistApiService.Get(ArtistId);
        if (artistServiceResult.Data is not { } artistResult)
        {
            return;
        }
        _artistResult = artistResult;
        _model.ArtistId = artistResult.Id;


        var lineupServiceResult = await LineupApiService.Get(LineupId);
        if (lineupServiceResult.Data is not { } lineupResult)
        {
            return;
        }
        _lineupResult = lineupResult;
        _model.LineupId = lineupResult.Id;

        await base.OnParametersSetAsync();
    }


    private async Task AddPerformance()
    {
        if (_model.ArtistId is not { } artistId)
        {
            return;
        }

        if (_model.LineupId is not { } lineupId)
        {
            return;
        }

        var serviceResult = await PerformanceApiService.Create(new PerformanceRequest { ArtistId = artistId, LineupId = lineupId, Duration = _model.Duration, Start = _model.Start, Type = _model.Type, BandcampId = _model.BandcampId, BandcampLink = _model.BandcampLink, Description = _model.Description, Name = _model.Name, Spotify = _model.Spotify, YouTube = _model.YouTube  });
        if (serviceResult.Messages is null)
        {
            NavigationManager.NavigateTo($"lineups/{LineupId}/performances");
        }
    }
}