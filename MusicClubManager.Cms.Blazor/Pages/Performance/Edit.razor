@page "/lineups/{lineupId:int}/{artistId:int}/edit-performance"

@layout LineupLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService
@inject IPerformanceService PerformanceApiService

@inject NavigationManager NavigationManager

<h3>Add performance</h3>

@if (_lineupResult is { } lineupResult && _artistResult is { } artistResult && _model is { }  model)
{
    <EditForm Model="model" OnValidSubmit="AddPerformance">
        <CreateEditPerformance Model="model"></CreateEditPerformance>

        <div>
            <InputNumber @bind-Value="model.LineupId" hidden />
            <p>@(lineupResult.Name ?? lineupResult.Doors.ToLongDateString()) (id: @model.ArtistId))</p>
        </div>

        <div>
            <InputNumber @bind-Value="model.ArtistId" hidden />
            <p>@artistResult.Name (id: @model.ArtistId)</p>
        </div>

        <ul>
            <li><button type="submit">Add</button></li>
        </ul>
    </EditForm>
}

@code {
    [Parameter]
    public int LineupId { get; set; }
    private LineupResult? _lineupResult;

    [Parameter]
    public int ArtistId { get; set; }
    private ArtistResult? _artistResult;

    private CreateEditLineupPerformanceFormModel? _model;

    protected override async Task OnParametersSetAsync()
    {
        var artistServiceResult = await ArtistApiService.Get(ArtistId);
        if (artistServiceResult.Data is not { } artistResult)
        {
            return;
        }
        _artistResult = artistResult;
        _model.ArtistId = artistResult.Id;


        var lineupServiceResult = await LineupApiService.Get(LineupId, new PaginationRequest { Page = 1, PageSize = 5 });
        if (lineupServiceResult.Data is not { } lineupResult)
        {
            return;
        }
        _lineupResult = lineupResult;
        _model.LineupId = lineupResult.Id;

        await base.OnParametersSetAsync();
    }


    private async Task AddPerformance()
    {
        if (_model.ArtistId is not { } artistId)
        {
            return;
        }

        if (_model.LineupId is not { } lineupId)
        {
            return;
        }

        var serviceResult = await PerformanceApiService.Create(new PerformanceRequest { ArtistId = artistId, LineupId = lineupId, Duration = _model.Duration, Start = _model.Start, Type = _model.Type });
        if (serviceResult.Messages is null)
        {
            NavigationManager.NavigateTo($"lineups/{LineupId}/performances");
        }
    }
}