@page "/performances/{performanceId:int}"

@layout LineupLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService
@inject IPerformanceService PerformanceApiService

@inject NavigationManager NavigationManager

<h3>Edit performance</h3>

@if (_lineupResult is { } lineupResult && _artistResult is { } artistResult && _model is { } model)
{
    <EditForm Model="model" OnValidSubmit="AddPerformance">
        <CreateEditPerformance Model="model"></CreateEditPerformance>

        <div>
            <InputNumber @bind-Value="model.LineupId" hidden />
            <p>@(lineupResult.Name ?? lineupResult.Doors.ToLongDateString()) (id: @model.ArtistId))</p>
        </div>

        <div>
            <InputNumber @bind-Value="model.ArtistId" hidden />
            <p>@artistResult.Name (id: @model.ArtistId)</p>
        </div>

        <ul>
            <li><button type="submit">Add</button></li>
        </ul>
    </EditForm>
}

@code {
    [Parameter]
    public int PerformanceId { get; set; }

    [Parameter]
    public int LineupId { get; set; }
    private PerformanceLineupResult? _lineupResult;

    [Parameter]
    public int ArtistId { get; set; }
    private ArtistResult? _artistResult;

    private CreateEditLineupPerformanceFormModel? _model;

    protected override async Task OnParametersSetAsync()
    {
        var performanceServiceResult = await PerformanceApiService.Get(PerformanceId);
        if (performanceServiceResult?.Data is not { } performanceResult)
        {
            return;
        }

        _model = new CreateEditLineupPerformanceFormModel
            {
                ArtistId = performanceResult.ArtistResult.Id,
                Duration = performanceResult.Duration,
                LineupId = performanceResult.LineupResult.Id,
                Start = performanceResult.Start,
                Type = performanceResult.Type
            };


        _artistResult = performanceResult.ArtistResult;
        _lineupResult = performanceResult.LineupResult;

        await base.OnParametersSetAsync();
    }


    private async Task AddPerformance()
    {
        if(_model is not { } model)
        {
            return;
        }

        if (model.ArtistId is not { } artistId)
        {
            return;
        }

        if (model.LineupId is not { } lineupId)
        {
            return;
        }

        var serviceResult = await PerformanceApiService.Update(PerformanceId, new PerformanceRequest { ArtistId = artistId, LineupId = lineupId, Duration = model.Duration, Start = model.Start, Type = model.Type });
        if (serviceResult.Messages is null)
        {
            NavigationManager.NavigateTo($"lineups/{lineupId}/performances");
        }
    }
}