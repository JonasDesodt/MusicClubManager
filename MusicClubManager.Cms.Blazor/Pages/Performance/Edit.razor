@page "/lineups/{lineupId:int}/performances/{performanceId:int}"

@layout LineupLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService
@inject IPerformanceService PerformanceApiService

@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="@($"lineups/{LineupId}/performances")" ReturnTitle="Performances">
    Edit performance
</SubTitle>

@if (_lineupResult is { } lineupResult && _artistResult is { } artistResult && _model is { } model)
{
    <Form TModel="CreateEditLineupPerformanceFormModel" Model="model" OnValidSubmit="AddPerformance">
        <Template>
            <div>
                <CreateEditPerformance Model="model"></CreateEditPerformance>

                <div>
                    <InputNumber @bind-Value="model.LineupId" hidden />

                    <p>Lineup:</p>
                    <p>@(lineupResult.Name ?? lineupResult.Doors.ToLongDateString()) (id: @model.ArtistId))</p>
                </div>

                <div>
                    <InputNumber @bind-Value="model.ArtistId" hidden />

                    <p>Artist:</p>
                    <p>@artistResult.Name (id: @model.ArtistId)</p>
                </div>
            </div>

            <Buttons>
                <li><button type="submit">Add</button></li>
            </Buttons>
        </Template>
    </Form>
}

@code {
    [Parameter]
    public int PerformanceId { get; set; }

    [Parameter]
    public int LineupId { get; set; }
    private PerformanceLineupResult? _lineupResult;

    [Parameter]
    public int ArtistId { get; set; }
    private ArtistResult? _artistResult;

    private CreateEditLineupPerformanceFormModel? _model;

    protected override async Task OnParametersSetAsync()
    {
        var performanceServiceResult = await PerformanceApiService.Get(PerformanceId);
        if (performanceServiceResult?.Data is not { } performanceResult)
        {
            return;
        }

        _model = new CreateEditLineupPerformanceFormModel
            {
                ArtistId = performanceResult.ArtistResult.Id,
                Duration = performanceResult.Duration,
                LineupId = performanceResult.LineupResult.Id,
                Start = performanceResult.Start,
                Type = performanceResult.Type,
                Name = performanceResult.Name,
                Bandcamp = performanceResult.Bandcamp,
                Description = performanceResult.Description,
                Spotify = performanceResult.Spotify,
                YouTube = performanceResult.YouTube
            };


        _artistResult = performanceResult.ArtistResult;
        _lineupResult = performanceResult.LineupResult;

        await base.OnParametersSetAsync();
    }


    private async Task AddPerformance()
    {
        if (_model is not { } model)
        {
            return;
        }

        if (model.ArtistId is not { } artistId)
        {
            return;
        }

        if (model.LineupId is not { } lineupId)
        {
            return;
        }

        var serviceResult = await PerformanceApiService.Update(PerformanceId, new PerformanceRequest { ArtistId = artistId, LineupId = lineupId, Duration = _model.Duration, Start = _model.Start, Type = _model.Type, Bandcamp = _model.Bandcamp, Description = _model.Description, Name = _model.Name, Spotify = _model.Spotify, YouTube = _model.YouTube });
        if (serviceResult.Messages is null)
        {
            NavigationManager.NavigateTo($"lineups/{lineupId}/performances");
        }
    }
}