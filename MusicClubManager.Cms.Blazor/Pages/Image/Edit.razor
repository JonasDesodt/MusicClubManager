@page "/images/{id:int}";

@layout ImageLayout

@using System.Text.Json
@using System.Text

@inject ImageApiService ImageApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="@($"/images{query}")" ReturnTitle="Index">
    Edit
</SubTitle>

@if (_model is not null)
{
    <Form TModel="IImageFormModel" Model="_model" OnValidSubmit="() => Submit(_model)">
        <Template>
            <ImageInputs Model="_model" />

            <Buttons>
                <li><button type="submit">Save</button></li>

                <li><button type="button" class="warning" @onclick="async () => _model = await GetModel(Id)">Undo changes</button></li>
            </Buttons>
        </Template>
    </Form>
}
else
{
    <Spinner />
}


@code {
    private IImageFormModel? _model;

    [Parameter]
    public int Id { get; set; }

    private string query => new Uri(NavigationManager.Uri).Query;

    protected override async Task OnInitializedAsync()
    {
        _model = await GetModel(Id);

        await base.OnInitializedAsync();
    }


    private async Task Submit(IImageFormModel model)
    {
        //ToMultipartFormDataContent returns null if there is no file
        if (model.ToMultipartFormDataContent() is { } content)
        {
            var serviceResult = await ImageApiService.Update(Id, content);

            if (serviceResult?.Data is null)
            {
                return; //todo: errormessages?
            }
        }
        else if (!string.IsNullOrWhiteSpace(model.Alt))
        {
            var serviceResult = await ImageApiService.UpdateProperties(Id, new ImageRequest
                {
                    Alt = model.Alt
                });

            if (serviceResult?.Data is null)
            {
                return; //todo: errormessages?
            }
        }

        NavigationManager.NavigateTo($"/images?{query}");
    }

    private async Task<IImageFormModel?> GetModel(int id)
    {
        if ((await ImageApiService.Get(id)).Data is { } imageResult)
        {
            return imageResult.ToEditImageFormModel();
        }

        return null;
    }
}