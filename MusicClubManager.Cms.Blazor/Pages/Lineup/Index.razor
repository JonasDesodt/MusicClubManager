@page "/lineups"

@layout LineupLayout

@inject ILineupService LineupApiService
@inject NavigationManager NavigationManager

<Navigation>
    <li><NavLink href="lineups/create">Create</NavLink></li>

    <li><NavLink href="lineups/filters">Filters</NavLink></li>
</Navigation>

@if(_pagedServiceResult is { } pagedServiceResult)
{
    <PagedList PagedServiceResult="pagedServiceResult" Context="lineupResult" OnPageChanged="(pagination) => FetchLineups(LineupContext, pagination, LineupContext.LineupFilter)">
        <ItemTemplate>
            <LineupItem LineupResult="lineupResult" />

            @{
                var href = $"lineups/{lineupResult.Id}";
            }
            <Buttons>
                <li><NavLink href="@href">Edit</NavLink></li>
            </Buttons>
        </ItemTemplate>
    </PagedList>
} 

@code {
    [CascadingParameter, EditorRequired]
    public required LineupContext LineupContext { get; set; }

    private PagedServiceResult<IList<LineupResult>>? _pagedServiceResult;

    protected override async Task OnInitializedAsync()
    {
        if (LineupContext is { } context)
        {
            await FetchLineups(context, context.Pagination, context.LineupFilter);
        }

        await base.OnInitializedAsync();
    }

    private async Task FetchLineups(LineupContext context, Pagination pagination, LineupFilter lineupFilter)
    {
        _pagedServiceResult = await LineupApiService.GetAll(new PaginationRequest { Page = (uint)pagination.Page, PageSize = (uint)pagination.PageSize }, lineupFilter);

        context.Pagination.PageSize = (int)_pagedServiceResult.PageSize;
        context.Pagination.Page = (int)_pagedServiceResult.Page;
        context.Pagination.TotalCount = (int)_pagedServiceResult.TotalCount;

        if(_pagedServiceResult.Data is null)
        {
            throw new NullReferenceException("Unable to fetch data");
        }
    }
}