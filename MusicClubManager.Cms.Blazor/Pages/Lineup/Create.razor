@page "/lineups/create"

@layout CreateLineupLayout

@inject ILineupService LineupApiService
@inject ImageApiService ImageApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="lineups" ReturnTitle="Lineups">
    Create
</SubTitle>

<Form TModel="LineupFormModel" Model="(LineupFormModel)Context.Model" OnValidSubmit="Submit" Context="model">
    <Template>
        <div>
            <div>
                <label for="name">Name</label>

                <InputText @bind-Value="model.Name" id="name" />
            </div>

            <div>
                <label for="doors">Doors <span>(required)</span></label>

                <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="model.Doors" id="doors" />
            </div>

            <label for="image">Image</label>
            @if (imageServiceResult?.Data is { } imageResult)
            {
                model.ImageId = imageResult.Id; //use hidden input??

                <ImageItem Model="imageResult" />

                <Navigation>
                    <li><button type="button" @onclick="() => { model.ImageId = null; imageServiceResult = null;}">Clear selection</button></li>
                </Navigation>
            }
            else
            {
                <p>There is no image selected</p>

                <Navigation>
                    <li><NavLink href="lineups/create/select-image">Select</NavLink></li>
                </Navigation>
            }


        </div>

        <Buttons>
            <li><button type="submit">Create</button></li>

            <li><button type="reset" class="warning">Reset</button></li>
        </Buttons>
    </Template>
</Form>

@code {
    [CascadingParameter, EditorRequired]
    public required ISelectImageContext Context { get; set; }

    private ServiceResult<ImageResult>? imageServiceResult;

    protected override async Task OnInitializedAsync()
    {
        if (Context.Model?.ImageId is { } imageId)
        {
            imageServiceResult = await ImageApiService.Get(imageId);
        }

        base.OnInitialized();
    }

    private async Task Submit(LineupFormModel model)
    {
        if(model.Doors is not {} doors)
        {
            return;
        }

        var serviceResult = await LineupApiService.Create(new LineupRequest
            {
                Doors = doors,
                IsSoldOut = model.IsSoldOut,
                Name = model.Name,
                ImageId = model.ImageId
            });

        NavigationManager.NavigateTo("lineups");
    }
}