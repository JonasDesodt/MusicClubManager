@page "/lineups/{lineupId:int}"

@layout LineupLayout

@inject ILineupService LineupApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="lineups" ReturnTitle="Lineups">
    Edit
</SubTitle>

<Navigation>
    @{
        var href = $"/lineups/{LineupId}/performances";
    }
    <li><NavLink href="@href">Peformances (@_performancesCount)</NavLink></li>
</Navigation>

@if (_model is { } model)
{
    <Form TModel="CreateLineupPropertiesFormModel" Model="model" Context="context" OnValidSubmit="(context) => Submit(LineupId, context)">
        <Template>
            <div>
                <div>
                    <label for="name">Name</label>

                    <InputText @bind-Value="context.Name" id="name" />
                </div>

                <div>
                    <label for="doors">Doors <span>(required)</span></label>

                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="context.Doors" id="doors" />
                </div>
            </div>

            <Buttons>
                <li><button type="submit">Save</button></li>

                <li><button type="button" @onclick="() => SetModel(LineupId)" class="warning">Undo changes</button></li>

                @{
                    var hrefDelete = $"lineups/{LineupId}/delete";
                }
                <li><NavLink href="@hrefDelete" class="warning">Delete</NavLink></li> 
            </Buttons>
        </Template>
    </Form>
}
else
{
    <Spinner />
}


@code {
    [Parameter]
    public int LineupId { get; set; }

    private CreateLineupPropertiesFormModel? _model;

    private int _performancesCount;


    protected override async  Task OnInitializedAsync()
    {
        await SetModel(LineupId);
        await base.OnInitializedAsync();
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     await SetModel(LineupId);

    //     await base.OnParametersSetAsync();
    // }

    private async Task<ServiceResult<LineupResult>> FetchLineup(int id)
    {
        return await LineupApiService.Get(id);
    }

    private async Task SetModel(int id)
    {
        if (LineupId > 0 && (await FetchLineup(LineupId)).Data is { } lineupResult)
        {

            _model = new CreateLineupPropertiesFormModel
                {
                    Doors = lineupResult.Doors,
                    IsSoldOut = lineupResult.IsSoldOut,
                    Name = lineupResult.Name
                };

            _performancesCount = (int)lineupResult.LineupPerformanceResults.Count;
        }
    }

    private async Task Submit(int id, CreateLineupPropertiesFormModel model)
    {
        if (model.Doors is not { } doors || id <= 0)
        {
            return;
        }

        var serviceResult = await LineupApiService.Update(id, new LineupRequest
            {
                Doors = doors,
                IsSoldOut = model.IsSoldOut,
                Name = model.Name,
            });

        NavigationManager.NavigateTo("lineups");
    }
}