@page "/lineups/{lineupId:int}/performances/select-artist"

@layout LineupLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService


<SubTitle ReturnUrl="@($"lineups/{LineupId}/performances")" ReturnTitle="Performances">
    Create performance: select artist
</SubTitle>

<Navigation>
    <li><NavLink href="@($"lineups/{LineupId}/performances/create-artist")">Create</NavLink></li>

    <li><NavLink href="@($"lineups/{LineupId}/performances/select-artist/filters)")">Filters</NavLink></li>
</Navigation>

@if (_lineupServiceResult is not null && _pagedServiceResult is not null)
{
    if (_lineupServiceResult.Data is { } lineupResult && _pagedServiceResult.Data is not null)
    {

        <PagedList PagedServiceResult="_pagedServiceResult" OnPageChanged="(context) => FetchArtists(LineupId, new PaginationRequest { Page = (uint)context.Page, PageSize = (uint)context.PageSize }, new ArtistFilter ())" Context="artistResult">
            <ItemTemplate>
                <ArtistItem Model="artistResult">
                    <Buttons>
                        <li><NavLink href="@($"lineups/{LineupId}/{artistResult.Id}/add-performance")">Select</NavLink></li>

                        <li><NavLink href="@($"lineups/{lineupResult.Id}/{artistResult.Id}/edit-artist")">Edit</NavLink></li>
                    </Buttons>
                </ArtistItem>
            </ItemTemplate>
        </PagedList>
    }
    else
    {
        <p>Something went wrong</p>
    }
}
else
{
    <Spinner />
}

@code {
    [Parameter]
    public int LineupId { get; set; }

    private ServiceResult<LineupResult>? _lineupServiceResult;

    private PagedServiceResult<IList<ArtistResult>>? _pagedServiceResult;

    protected override async Task OnParametersSetAsync()
    {
        _lineupServiceResult = await FetchLineup(LineupId);

        _pagedServiceResult = await FetchArtists(LineupId, new PaginationRequest { Page = 1, PageSize = 24 }, new ArtistFilter { });

        await base.OnParametersSetAsync();
    }

    private async Task<ServiceResult<LineupResult>?> FetchLineup(int id)
    {
        return await LineupApiService.Get(id);
    }

    private async Task<PagedServiceResult<IList<ArtistResult>>?> FetchArtists(int id, PaginationRequest paginationRequest, ArtistFilter artistFilter)
    {
        return await ArtistApiService.GetAll(paginationRequest, artistFilter);
    }

}
