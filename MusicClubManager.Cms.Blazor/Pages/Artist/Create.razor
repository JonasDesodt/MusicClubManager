@page "/artists/create"

@layout CreateArtistLayout

@inject IArtistService ArtistApiService
@inject ImageApiService ImageApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="@("artists")" ReturnTitle="Index">
    Create
</SubTitle>

@if(Context.Model is not null)
{
    <Form TModel="IArtistFormModel" Model="Context.Model" OnValidSubmit="() => Submit(Context.Model)">
        <Template>
            <ArtistInputs Model="Context.Model"></ArtistInputs>

            <div>
                <label for="image">Image</label>
                @if (imageServiceResult?.Data is { } imageResult)
                {
                    Context.Model.ImageId = imageResult.Id; //use hidden input??

                    <ImageItem Model="imageResult" />

                    <Navigation>
                        <li><button type="button" @onclick="() => { Context.Model.ImageId = null; imageServiceResult = null;}">Clear selection</button></li>
                    </Navigation>
                }
                else
                {
                    <p>There is no image selected</p>

                    <Navigation>
                        <li><NavLink href="artists/create/select-image">Select</NavLink></li>
                    </Navigation>
                }
            </div>

            <Buttons>
                <li><button type="submit">Create</button></li>

                <li><button type="reset" class="warning">Reset</button></li>
            </Buttons>
        </Template>
    </Form>
}


@code {
    private ServiceResult<ImageResult>? imageServiceResult;

    [CascadingParameter, EditorRequired]
    public required CreateEditArtistContext Context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Context.Model?.ImageId is { } imageId)
        {
            imageServiceResult = await ImageApiService.Get(imageId);
        }

        base.OnInitialized();
    }

    private async Task Submit(IArtistFormModel model)
    {
        if(model.Name is null)
        {
            return;
        }


        var serviceResult = await ArtistApiService.Create(new ArtistRequest
            {
                Name = model.Name,
                Description = model.Description,
                ImageId = model.ImageId
            });

        if(serviceResult?.Data is not null)
        {
            NavigationManager.NavigateTo("artists");
        }
    }
}