@page "/artists/edit/{id:int}"

@layout EditArtistLayout

@inject IArtistService ArtistApiService
@inject ImageApiService ImageApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnTitle="Index" ReturnUrl="artists">
    Edit
</SubTitle>


@if (Context.Model is not null)
{
    <Form TModel="IArtistFormModel" Model="Context.Model" OnValidSubmit="() => Submit(Context.Model)">
        <Template>
            <ArtistInputs Model="Context.Model"></ArtistInputs>

            <div>
                <label for="image">Image</label>
                @if (imageServiceResult?.Data is { } imageResult)
                {
                    Context.Model.ImageId = imageResult.Id; //use hidden input??

                    <ImageItem Model="imageResult" />

                    <Navigation>
                        <li><button type="button" @onclick="() => { Context.Model.ImageId = null; imageServiceResult = null;}">Clear selection</button></li>
                    </Navigation>
                }
                else
                {
                    <p>There is no image selected</p>

                    <Navigation>
                        <li><NavLink href="@($"artists/edit/{Id}/select-image")">Select image</NavLink></li>
                    </Navigation>
                }
            </div>

            <Buttons>
                <li><button type="submit">Save</button></li>

                <li><button type="button" @onclick="() => FetchArtist(Id)" class="warning">Undo changes</button></li>
            </Buttons>
        </Template>
    </Form>
}
else
{
    <Spinner />
}

@code {
    [CascadingParameter, EditorRequired]
    public required CreateEditArtistContext Context { get; set; }

    [Parameter]
    public int Id { get; set; }

    private ServiceResult<ImageResult>? imageServiceResult;

    protected override async Task OnInitializedAsync()
    {
        if (Context.Model is null)
        {
            await FetchArtist(Id);
        }

        if (Context.Model?.ImageId is { } imageId)
        {
            imageServiceResult = await ImageApiService.Get(imageId);
        }

        await base.OnInitializedAsync();
    }

    private async Task FetchArtist(int id)
    {
        var artistServiceResult = await ArtistApiService.Get(id);

        if (artistServiceResult?.Data is { } artistResult)
        {

            // Model.Description = artistResult.Description;
            // Model.ImageId ??= artistResult.ImageResult?.Id;
            // Model.Name = artistResult.Name;

            Context.Model = new ArtistFormModel
                {
                    Description = artistResult.Description,
                    ImageId = artistResult.ImageResult?.Id,
                    Name = artistResult.Name
                };
        }
    }

    private async Task Submit(IArtistFormModel model)
    {
        if (string.IsNullOrWhiteSpace(model.Name))
        {
            return;
        }

        var request = new ArtistRequest
            {
                Name = model.Name,
                Description = model.Description,
                ImageId = model.ImageId
            };

        if ((await ArtistApiService.Update(Id, request)).Data is not { } artistResult)
        {
            return;
        }

        NavigationManager.NavigateTo("artists");
    }
}