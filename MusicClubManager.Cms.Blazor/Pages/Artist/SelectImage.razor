@page "/artists/create/select-image"

@layout CreateArtistLayout

@inject ImageApiService ImageApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="artists/create" ReturnTitle="Create">
    Create: select image
</SubTitle>

<Navigation>
    <li><NavLink href="artists/create/select-image/filters">Filters</NavLink></li>
</Navigation>

@if (_pagedServiceResult is { } pagedServiceResult)
{
    <PagedList PagedServiceResult="pagedServiceResult" Context="imageResult" OnPageChanged="(pagination) => FetchImages(pagination)">
        <ItemTemplate>
            <ImageItem Model="imageResult">
                <Buttons>              
                    <li><button @onclick="() => Select(imageResult.Id)">Select</button></li>
                </Buttons>
            </ImageItem>
        </ItemTemplate>
    </PagedList>
}
else
{
    <Spinner />
}

@code {
    [CascadingParameter, EditorRequired]
    public required ArtistFormModel Model { get; set; }

    private PagedServiceResult<IList<ImageResult>>? _pagedServiceResult;

    protected override async Task OnInitializedAsync()
    {
        await FetchImages(new Pagination { Page = 1, PageSize = 12 });

        await base.OnInitializedAsync();
    }

    private async Task FetchImages(Pagination pagination)
    {
        _pagedServiceResult = await ImageApiService.GetAll(new PaginationRequest { Page = (uint)pagination.Page, PageSize = (uint)pagination.PageSize });
    }

    private void Select(int id)
    {
        Model.ImageId = id;
        NavigationManager.NavigateTo("artists/create");
    }
}
