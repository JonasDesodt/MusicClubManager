@page "/artists"

@layout LineupLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService

<h3>Artists</h3>

<Navigation>
    <li><NavLink href="artists/create">Create new</NavLink></li>
</Navigation>

@if (_pagedServiceResult is not null && LineupContext is not null)
{
    if (_pagedServiceResult.Data is not null)
    {
        <PagedList PagedServiceResult="_pagedServiceResult" Context="artistResult" OnPageChanged="(context) => FetchArtists(new PaginationRequest { Page = (uint)LineupContext.Pagination.Page, PageSize = (uint)LineupContext.Pagination.PageSize}, new ArtistFilter ())">
            <ItemTemplate>
                <ArtistItem Model="artistResult">
                    <Buttons>
                        <li><NavLink href="@($"artists/{artistResult.Id}")">Edit</NavLink></li>
                    </Buttons>
                </ArtistItem>
            </ItemTemplate>
        </PagedList>
    }
    else
    {
        <p>Error</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    [CascadingParameter]
    public LineupContext? LineupContext { get; set; }

    private PagedServiceResult<IList<ArtistResult>>? _pagedServiceResult;

    protected override async Task OnInitializedAsync()
    {
        if(LineupContext is null) {
            return;
        }

        await FetchArtists(new PaginationRequest { Page = (uint)LineupContext.Pagination.Page, PageSize = (uint)LineupContext.Pagination.PageSize }, new ArtistFilter());

        await base.OnInitializedAsync();
    }

    private async Task FetchArtists(PaginationRequest paginationRequest, ArtistFilter artistFilter)
    {
        _pagedServiceResult = await ArtistApiService.GetAll(paginationRequest, new ArtistFilter());
    }
}
