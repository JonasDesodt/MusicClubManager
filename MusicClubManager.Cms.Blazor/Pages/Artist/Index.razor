@page "/artists"

@layout ArtistLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService
@inject NavigationManager NavigationManager

<SubTitle ReturnUrl="@($"/")" ReturnTitle="Home">
    Index
</SubTitle>

<Navigation>
    <li><NavLink href="@($"artists/create")">Create</NavLink></li>

    <li><NavLink href="@($"artists/filters")">Filters</NavLink></li>
</Navigation>

@if (_pagedServiceResult is not null)
{
    <PagedList PagedServiceResult="_pagedServiceResult" Context="artistResult" OnPageChanged="(context) => FetchArtists(new PaginationRequest { Page = (uint)context.Page, PageSize = (uint)context.PageSize }, new ArtistFilter ())">
        <ItemTemplate>
            <ArtistItem Model="artistResult">
                <Buttons>
                    <li><NavLink href="@($"artists/edit/{artistResult.Id}")">Edit</NavLink></li>

                    <li><NavLink href="@($"artists/delete/{artistResult.Id}")">Delete</NavLink></li>
                </Buttons>
            </ArtistItem>
        </ItemTemplate>
    </PagedList>
}
else
{
    <Spinner />
}

@code {
    [CascadingParameter]
    public required Pagination Pagination { get; set; }

    private PagedServiceResult<IList<ArtistResult>>? _pagedServiceResult;

    protected override async Task OnInitializedAsync()
    {
        await FetchArtists(new PaginationRequest { Page = (uint)Pagination.Page, PageSize = (uint)Pagination.PageSize }, new ArtistFilter());

        await base.OnInitializedAsync();
    }

    private async Task FetchArtists(PaginationRequest paginationRequest, ArtistFilter artistFilter)
    {
        _pagedServiceResult = await ArtistApiService.GetAll(paginationRequest, new ArtistFilter());

        Pagination.Page = (int)_pagedServiceResult.Page;
        Pagination.PageSize = (int)_pagedServiceResult.PageSize;
    }
}
