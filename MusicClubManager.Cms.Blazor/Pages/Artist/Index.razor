@page "/artists"

@layout LineupLayout

@inject IArtistService ArtistApiService
@inject ILineupService LineupApiService

<h3>Artists</h3>

<NavLink href="artists/create">Create new</NavLink>

@if (_pagedServiceResult is not null)
{
    if (_pagedServiceResult.Data is not null)
    {
        <ArtistIndex PagedServiceResult="_pagedServiceResult" Context="artistResult" OnPageChanged="(context) => FetchArtists(new PaginationRequest { Page = (uint)context.Page, PageSize = (uint)context.PageSize }, new ArtistFilter ())">
            <ItemTemplate>
                @{
                    var editHref = $"artists/{artistResult.Id}";
                }
                <NavLink href="@editHref">@artistResult.Name</NavLink>
            </ItemTemplate>
        </ArtistIndex>
    }
    else
    {
        <p>Error</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private PagedServiceResult<IList<ArtistResult>>? _pagedServiceResult;

    protected override async Task OnInitializedAsync()
    {
        await FetchArtists(new PaginationRequest { Page = 1, PageSize = 5 }, new ArtistFilter());

        await base.OnInitializedAsync();
    }

    private async Task FetchArtists(PaginationRequest paginationRequest, ArtistFilter artistFilter)
    {
        _pagedServiceResult = await ArtistApiService.GetAll(new PaginationRequest { Page = 1, PageSize = 5 }, new ArtistFilter());
    }
}
